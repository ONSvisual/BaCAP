var m=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function S(t){var l=t.default;if(typeof l=="function"){var i=function(){return l.apply(this,arguments)};i.prototype=l.prototype}else i={};return Object.defineProperty(i,"__esModule",{value:!0}),Object.keys(t).forEach(function(e){var r=Object.getOwnPropertyDescriptor(t,e);Object.defineProperty(i,e,r.get?r:{enumerable:!0,get:function(){return t[e]}})}),i}function G(t,l,i){if(t!==null)for(var e,r,n,u,c,o,a,y=0,f=0,p,g=t.type,b=g==="FeatureCollection",v=g==="Feature",C=b?t.features.length:1,P=0;P<C;P++){a=b?t.features[P].geometry:v?t.geometry:t,p=a?a.type==="GeometryCollection":!1,c=p?a.geometries.length:1;for(var M=0;M<c;M++){var s=0,w=0;if(u=p?a.geometries[M]:a,u!==null){o=u.coordinates;var h=u.type;switch(y=i&&(h==="Polygon"||h==="MultiPolygon")?1:0,h){case null:break;case"Point":if(l(o,f,P,s,w)===!1)return!1;f++,s++;break;case"LineString":case"MultiPoint":for(e=0;e<o.length;e++){if(l(o[e],f,P,s,w)===!1)return!1;f++,h==="MultiPoint"&&s++}h==="LineString"&&s++;break;case"Polygon":case"MultiLineString":for(e=0;e<o.length;e++){for(r=0;r<o[e].length-y;r++){if(l(o[e][r],f,P,s,w)===!1)return!1;f++}h==="MultiLineString"&&s++,h==="Polygon"&&w++}h==="Polygon"&&s++;break;case"MultiPolygon":for(e=0;e<o.length;e++){for(w=0,r=0;r<o[e].length;r++){for(n=0;n<o[e][r].length-y;n++){if(l(o[e][r][n],f,P,s,w)===!1)return!1;f++}w++}s++}break;case"GeometryCollection":for(e=0;e<u.geometries.length;e++)if(G(u.geometries[e],l,i)===!1)return!1;break;default:throw new Error("Unknown Geometry Type")}}}}}function d(t,l){var i,e,r,n,u,c,o,a,y,f,p=0,g=t.type==="FeatureCollection",b=t.type==="Feature",v=g?t.features.length:1;for(i=0;i<v;i++){for(c=g?t.features[i].geometry:b?t.geometry:t,a=g?t.features[i].properties:b?t.properties:{},y=g?t.features[i].bbox:b?t.bbox:void 0,f=g?t.features[i].id:b?t.id:void 0,o=c?c.type==="GeometryCollection":!1,u=o?c.geometries.length:1,r=0;r<u;r++){if(n=o?c.geometries[r]:c,n===null){if(l(null,p,a,y,f)===!1)return!1;continue}switch(n.type){case"Point":case"LineString":case"MultiPoint":case"Polygon":case"MultiLineString":case"MultiPolygon":{if(l(n,p,a,y,f)===!1)return!1;break}case"GeometryCollection":{for(e=0;e<n.geometries.length;e++)if(l(n.geometries[e],p,a,y,f)===!1)return!1;break}default:throw new Error("Unknown Geometry Type")}}p++}}export{m as a,S as b,G as c,d as g};
